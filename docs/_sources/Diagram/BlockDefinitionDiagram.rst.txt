===============
ブロック定義図
===============

他の章で解説する内部ブロック図、パラメトリック図等、いくつかの図を記述する上で、別
途「型」を定義しておくことが必要である。
本章では、型を定義するための図であるブロック
定義図について解説する。

ブロック定義図とは
==================

ブロック定義図(Block Definition Diagram) と内部ブロック図(Internal Block Diagram)は構造図として位置づけられ、システムの構造を表現するために利用される。
構造図を用いて、システムをその構成要素のツリー構造として表現することを始め、構成要素間の種々の関係を表現できる。

本章で解説するブロック定義図は、特にシステムを構成する要素の型(Type) を定義するために利用される。では、ここで言う「型」とはどのようなものだろうか。
例として、「田中さんのマイカー」、「佐藤さんのマイカー」といった、いくつかの実在の自動車を考えてみよう。
そしてこれらの自動車を分類してみて欲しい。
セダン、ハッチバックといった車体の形状に着目した分類や、FF、FRといった駆動方式に着目した分類等、いくつかの分類方法があることに気付くだろう。
得られたこれらの分類に対して、各々どのような特性を持っているかを考えてみて欲しい。
それまで漠然としていた「自動車」に対する捉え方が、徐々に明確なものになってきたのではないだろうか。
この例では、「田中さんのマイカー」が実際の物理的な物であるのに対して、「セダン」「FF」等は物の特性を表す型とみなすことができる。
型に着目して物事を掘り下げていくことは、すなわち物事を分析し、明確化することだと言えるだろう。

このように型に着目しながらシステムやその構成要素を表現する上で、ブロック定義図を活用できる。
ブロック定義図で利用可能な型にはいくつかの種類があり、後述のブロックや値型等が含まれる。
ブロック定義図は、言語仕様上UMLのクラス図をベースとしており、クラス図で使える言語要素の多くをブロック定義図でも使うことができる。

ブロック定義図の例(全体)
========================

ブロック定義図について説明するための題材として、図3.2のようなロケットを考えてみよう。

図3.4は、より多くの種類のモデル要素を用いて、ロケットの構造の概略を表現したブロック定義図である。
以降、図3.4のブロック定義図をもとに、各モデル要素について説明していく。

ブロック
=========

**システムやその構成要素を表現するための単位**

- ブロックは、システムをその構成要素に分解することや、それら要素を分類することによって得ることができる
- ブロックを使って、システムを構成単位のツリー構造として表現できる
- ブロックは型の一種であり、プロパティや操作等、後述するような様々な情報をブロックに付加することで、ブロックをより詳細に表現できる
- ブロックの表記ではステレオタイプ名≪ block ≫を用いる。ただしブロック定義図の中で≪ block ≫の表記を省略してもデフォルトでブロックと見なされるため、表記を省略しても構わない

**例**

図3.4のブロック定義図では、ロケットのようなシステムや、その構成要素であるロケットエンジン等を表す単位を、図3.5のように表現している。


関連(Association)
==================

**関連とは2つのブロックの間で単に関係があることを表現する。**

**例**

図3.4のブロック定義図では、推進部と被運搬部の間に、「推進部が被運搬部に推力を加える」関係があることを図3.7のように表現している。
関連でつながれた一方のブロックが関連名の主語に当たる場合には、黒い三角形で関連の作用する方向を表現できる。
また、「～を加速する」のように関連につながるブロックの一方が目的語に当たる場合には、より簡単に「加速する」と表記できる。

図3.7は推進部と被運搬部の意味的な関係を表現したやや抽象的なモデルだが、関連を使ってより物理的な関係を表現できる。
図3.8は推進部と被運搬部の間の物理的な接続関係を表現したモデルの例である。
後述のパート関連や共有関連のように特別な意味を持つ関連と異なり、図3.7のようにブロック間の単純な参照関係を表現するための関連を、参照関連(Reference Association) と呼ぶ。

関連端(AssociationEnd)
=======================

**関連端とは関連の表す文脈において、関連につながるブロックが果たす役割を表現する。**

**例**

図3.4では、「～に推力を加える」関係において、推進部は「推進元」として働き、被運搬部は「作用先」として働くことを図3.9のように表現している。

誘導可能性(Navigability)
=========================

**誘導可能性とは関連でつながれた一方のブロックから、もう一方のブロックを参照できるかどうかを表す。**

**例**

図3.4では、コア機体と固体燃料ブースターの間の関係について、コア機体から固体燃料ブースターを参照するが、逆に固体燃料ブースターからコア機体は参照しないことを図3.10のように表現している。
図3.10では単方向のみ参照が可能なため、関連の一端に矢印を表記している。
これに対して双方向とも参照が可能な場合には、図3.7のように矢印を表記しない。

多重度(Multiplicity)
======================

**多重度とは関連でつながれた一方のブロックのインスタンス1つに対して、もう一方のブロックのインスタンスがいくつ対応するかを表す。**

- 多重度の表記で、「0..*」のように文字「*」を使うと上限の指定のないことを意味する。
- また多重度として文字「*」のみを単独で指定した場合は、「0..*」と同じ意味になる。
- 誘導可能性が単方向のみの関連において、参照される側の多重度を省略すると、デフォルト多重度「1」が適用される
- 後述のパート関連や共有関連では、菱形側のデフォルト多重度は「0..1」

**例**

図3.4では、コア機体と固体燃料ブースターの間の関係について、1つのコア機体に対し固体燃料ブースターを最大4基まで装備可能であることを図3.11のように表現している。
装備可能な下限は0基であり、すなわちブースターを装備しない場合もあることを表している。


図3.12では、荷載部に対するフェアリングの多重度は示されていない。
このように誘導可能性が単方向のみの関連において、参照される側の多重度を省略すると、デフォルト多重度「1」が適用される。
この場合1つの荷載部に対してフェアリングは1つ対応することを意味する。
なお後述のパート関連や共有関連では、菱形側のデフォルト多重度は「0..1」である。

パート関連(Part Association)
=============================

**全体と部分との関係を表現する関連を表す。**

図3.4では、ロケットと推進部の間の関係について、推進部がロケットの一部であることを図3.13のように表現している。
パート関連には以下のような制約がある。

- パート関連で表現された「全体-部分」関係において、部分は同時に複数の全体に属することはできない。
- パート関連における全体が削除されると、部分も同時に削除される。


図3.4では、推進部がコア機体、ロケットエンジン、固体燃料ブースターから構成されていることを図3.14 のように表している。
このように、ある1つのブロックをパート関連の一端（全体側）とする関係が複数ある場合に、パート関連の一端をまとめて表記できる場合がある。
このように表記したパート関連を、多分岐パート関連(Multibranch Part Association)と呼ぶ。
関連の一端をまとめて表記するには、まとめられる側の関連端の情報（関連端名、多重度、誘導可能性等）が一致している必要がある。

共有関連(Shared Association)
==============================

図3.4では、ロケットと被運搬部の間の関係について、被運搬部がロケットの一部であること、ロケットが破棄されても被運搬部は運用が継続されることを、共有関連(Shared Association)を用いて図3.15 のように表現している。
共有関連は、厳密な意味を定められているわけではなく、モデリングの状況に応じて意味を決めて利用するための関連である。
「3.4.4 パート関連」と同様、共有関連についても、関連の一端をまとめて表記できる。
これを多分岐共有関連(Multibranch Shared Association) と呼ぶ。

関連ブロック(Association Block)
===============================

図3.4では、液体燃料タンクとロケットエンジンの関係について、液体燃料タンクからロケットエンジンに液体燃料が供給される関係があること、燃料供給量のような情報が伴うことを図3.16 のように表現している。
このように、関連だけでなくブロックの性質を合わせ持つことで、単なる関連よりも多くの特性を表現できるモデル要素を、関連ブロック(Association Block)と呼ぶ。
関連ブロックは、関連であると同時にブロックでもあるため、後述のようなプロパティや操作等、通常のブロックと同様の要素を保持できる。

区画(Compartment)
==================

図3.17では、図3.4の「推進部」ブロックに付随する様々な特性を表現している。
このように、ブロックの特性を様々な形式で表現する際に、区別して表記するための領域を区画(Compartment)と呼ぶ。
SysML ではいくつかの標準的な区画を規定している。
また利用者が区画を定義して利用できる。
ブロックの矩形に各種区画を表記する順序は任意である。
区画中に区画名を表記して、種類を明示的に区別しても良い。

プロパティ用区画
-----------------

「3.5.1プロパティ」のように、プロパティをブロックの区画中に表記できる。
表3.3は、プロパティを表現する上で利用できる区画である。

 ============= ================================== 
  区画名           説明                                
 ============= ================================== 
  values        値型（「3.7 値型」で後述）を型とするプロパティのための区画   
  parts         パート関連で保有するブロックを型とするプロパティのための区画    
  references    参照関連で関係付けられたブロックを型とするプロパティのための区画  
  properties    プロパティ全般を区別なく表記するための区画             
 ============= ================================== 



プロパティ(Property)
^^^^^^^^^^^^^^^^^^^^^

図3.18 では、図3.4 の「ロケットエンジン」ブロックが保持する情報を区画中に表現している。
このように、ブロックが保持する情報がプロパティ(Property)である。

プロパティは、ブロックの区画中に以下のような形式で表記できる。

::

    プロパティ名: 型[多重度] = デフォルト値{ プロパティ修飾子}

- 上記の形式の中で、プロパティ名以外は省略して表記できる。
- 多重度の表記を省略した場合は、多重度は1と見なされる。


利用可能なプロパティ修飾子の例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

 ================= ============================== 
  プロパティ修飾子    意味                         
 ================= ============================== 
  readOnly          プロパティは読み取り専用      
  ordered           プロパティは順序付けられている  
  unique            プロパティに重複がない       
 ================= ============================== 

**記述例**
::

    
    補助推進: 固体燃料ブースター[0..4]
    推力: kN = 2000
    ペイロードID : Integer { unique }

「3.4.1 関連端」の関連端もプロパティの一種である。
例えば、図3.9 において、関連端「作用先」はブロック「推進部」が保持するプロパティである。

分布プロパティ(Distributed Property)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

図3.4では、固体燃料ブースターの推力の確率分布が正規分布であることを図3.19のように表現している。
このように、値の確率分布を指定できるように拡張されたプロパティを、分布プロパティ(Distributed Property)と呼ぶ。
各種分布プロパティを、表3.2に示す。
分布プロパティの記述例を以下に示す。

**記述例**
::

    { mean=2500, standardDeviation=0.8 } 推力: kN
    ≪ interval ≫ { min=101.0, max=105.0 } 体積: m^3
    ≪ uniform ≫ { min=87, max=92 } 速度: mph

記述例のように、分布プロパティの種類がNormal の場合にはパラメータの種類で判別できるが、Interval とUniform はパラメータの種類が同じであるため、ステレオタイプを明示して区別する。

 =============== ==================== ======= ========= ========================================================================= 
  ステレオタイプ       パラメータ名称      型     意味       説明                                            
 =============== ==================== ======= ========= ========================================================================= 
  ≪Interval≫    min                  Real    最小値     値はminとmaxの間に分布する。min及びmaxも範囲に含む。確率分布は指定しない。   
  ↑             max                    Real    最大値     ↑                                                                      
  ≪Uniform≫     min                  Real    最小値     値はminとmaxの間に分布する。min及びmaxも範囲に含む。確率分布は一定。         
  ↑             max                    Real    最大値     ↑                                                                       
  ≪Normal≫      mean                 Real    平均      値の確率分布は正規分布に従う。                                              
  ↑             standardDeviation      Real    標準偏差    ↑                                                                      
 =============== ==================== ======= ========= ========================================================================= 



制約区画(Constraints Compartment)
----------------------------------

図3.4では、推進部全体の推力の合計（総推力）が、ロケットエンジンの推力の合計と、固体燃料ブースターの推力の合計の和に等しくなるという制約があることを図3.20 のように表現している。
このように、モデル要素の間にある制約を表現するための区画が、制約区画(Constraints Compartment) である。
制約区画に記述する制約は、一般的なテキストベースの書式による制約の記述を波括弧で囲った形式で表現する。
区画の中に制約を複数記述しても良い。
図3.20の例では、SysML と同様OMG (Object Management Group) によって仕様が策定されたOCL (Object Constraint Language) を用いて制約を表現している。
制約を表現する上で、区画に記載せずにノート（「2.3 コメント」参照）を使うこともできる。
図3.21 は、ノートを使って制約を表現した例である。

名前空間区画(Namespace Compartment)
------------------------------------

図3.22 では、「荷載部」ブロックが他のいくつかのブロックの定義を包含していることを、図3.4 とは異なる形式で表現している。
このように、あるブロックが別のモデル要素の定義を包含しているときに、包含されたモデル要素をグラフィカルに表現するための区画が、名前空間区画(Namespace Compartment)である。
名前空間区画には、ブロック定義図で利用可能な様々なモデル要素を表記できる。
名前空間区画を使って、モデル要素の定義の包含関係を表現できるが、これはあくまでモデル要素の定義がどこに属するかの問題であり、ブロック間の「全体-部分関係」等とは異なるので注意されたい。

構造区画(Structure Compartment)
--------------------------------

図3.23 では、「推進部」ブロックがいくつかの要素から構成されていることを、図3.4 とは異なる形式で表現している。
このように、ブロックを構成する要素を表現するための区画が、構造区画(Structure Compartment)である。
構造区画では、第4 章で解説する内部ブロック図で利用可能な多くのモデル要素を使うことができる。
これらのモデル要素の詳細について詳しくは第4 章「内部ブロック図」や第5章「ポートとフロー」を参照されたい。

操作区画(Operations Compartment)
----------------------------------

図3.4 では、ロケットエンジンが「点火する」振る舞いを持つことを、図3.24 のように表現している。
このように、ブロックの振る舞いを表すモデル要素が、操作である。
そして操作を表記するためのブロック中の区画が、操作区画(Operations Compartment)である。
操作区画には以下のような形式で操作を表記できる。

操作の形式
^^^^^^^^^^^

::

    操作名( パラメータリスト) : 返却値型

- 返却値型は省略して表記できる。
- パラメータリストは、パラメータをカンマ区切りで表記する。
- パラメータの形式は以下の通りである。

パラメータの形式
^^^^^^^^^^^^^^^^^

::
    
    方向パラメータ名: 型名= デフォルト値

- 上記のうちパラメータ名以外は省略して表記できる。
- 方向には、in, out, inout を指定できる。
- 各々、入力パラメータ、出力パラメータ、入出力パラメータを意味する。

**記述例**
::
    
    点火する()
    ブースターを分離する(bids : ブースターID リスト) : 結果
    燃料を供給する(in tid : タンクID = 1, in amount : tps, out prevResult : tps) : 結果

汎化(Generalization)
======================

図3.4 では、ロケットによって運搬される被運搬部の種類として、荷載部とロケット（この場合第2段ロケット）があることを、図3.25 のように表現している。
ここで被運搬部は、ロケットによって運搬される部分を抽象的に表した概念である。
このように、相対的に具象的なブロックと抽象的なブロックとの関係を表現するためのモデル要素が、汎化(Generalization)である。
具象的なブロックのインスタンスは、そのブロックと汎化関係のあるより抽象的なブロックの特性を受け継ぐ。
汎化はしばしば物事の体系的な分類のために利用される。
また図3.25 では、被運搬部が抽象的な概念であり、実体はあくまでロケットや荷載部であることを表現している。
このように、直接インスタンス（実体）の型になることのないブロックに対し、抽象指定{abstract} を設定する。
抽象指定されたブロックは、直接インスタンス化されない代わりに、汎化関係のあるより具象的なブロックがインスタンスの型となる。
抽象指定されたブロックの名称はイタリック体で表記する。

値型
======

図3.4 の中では図3.26 のように、ロケットエンジンの推力の値を単位「kN」を表す型で扱っている。
このように、値の型を定義するためのモデル要素が、値型(Value Type) である。
値型で型付けられた情報は、参照を介して扱われることはなく、値としてのみ扱われる。
このため値型は参照関連による参照先となることはない。
値型を定義する際には、図3.27のようにしばしば単位や量種別を利用する。

図3.27では、値型kN を単位「キロニュートン」を使って定義している。
このようにモデル要素「単位」(Unit) を使って、値型の定義で用いる単位を指定できる。

また図3.27では、単位「キロニュートン」が量種別「力」を使って定義されている。
このように、単位や値型がどのような種類の量を表すかを定義するためのモデル要素が、量種別(Quantity Kind) である。
単位や量種別は型ではないため、ブロックのプロパティや操作のパラメータのための型として直接利用できない。
そのような目的には値型を定義して利用する。
図3.27の値型の定義では、ステレオタイプ≪ valueType ≫ を修飾するための値を、ステレオタイプ・プロパティ区画(Stereotype Property Compartment) の中に名前と値の組で表
記している。ここでは名前「unit」とその値「キロニュートン」を指定しているが、値型の定義にはこの他に名前「quantityKind」とその値を指定できる。
一方、単位の定義では「quantityKind」を指定している。
これら「unit」や「quantityKind」の指定はいずれもオプションであり、省略できる。
図3.27 の値型や単位の定義では、要素名のための最上位の区画でステレオタイプ名≪valueType ≫ や≪ unit ≫ の表記を省略しているが、表記しても良い。
値型は、プロパティや操作を持つこともできる。
図3.28 は、SysML のモデルライブラリに含まれている、実数(Real) や複素数(Complex)を表す値型の定義である。
SysML の利用者は、これらの値型を使ってモデリングできる。